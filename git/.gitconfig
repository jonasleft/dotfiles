
[core]
  editor = vim
  excludesfile = ~/.gitignore_global

[alias]
  st = status -s
  co = commit
  com = commit -m
  pu = push
  d  = diff
  dt = difftool
  lg = log --decorate --graph --remotes --branches --tags --pretty=tformat:'%C(dim white)%m%C(dim green)%h %C(dim cyan)%cd %C(yellow)%<(12,trunc)%aN %C(reset)%s%C(auto)%w(0,0,9)%+d%C(reset)'
  fa = "!f() { \
       git ls-files -m --exclude-standard | \
       fzf --print0 -m --preview='git diff --color=always {}' | \
       xargs -0 -t -o git add; \
       }; f"
  release = describe --abbrev=6 --dirty --always --tags

  ls = "ls-tree --full-tree -r --name-only HEAD"
  # print git root directory:
  root = rev-parse --show-toplevel
  # print latest hash on remote. do a "git remote update && git fetch" or "git fetch -all" first!
  remotehash = "!git rev-parse `git branch -r --sort=committerdate | tail -1`"
  # print current hash
  hash = rev-parse HEAD
  # print current branch
  branchname = rev-parse --abbrev-ref HEAD

  # Check if current checkout is behind:
  isbehind = "!f() { \
              if [ $(git hash) = $(git remotehash) ]; then echo LATEST; else echo \"OLD \\032 \\032 \\032  \" ; fi; \
               }; f"

  # fetch all from all submodules:
  sfetch =  "submodule foreach git fetch --all"
  # check all submodules of checkout is behind: 
  scheck =  "submodule foreach --quiet 'echo `git isbehind` `git branchname`  $name'"

  # merge dry run: (abort with: git merge --abort)
  mergedry = merge --no-commit --no-ff 

[log]
  date = format:%Y-%m-%d %H:%M
[diff]
  tool = vimdiff
[merge]
  tool = vimdiff
  conflictstyle = diff3
[mergetool]
  prompt = false
[difftool]
  prompt = false
  # be able to abort all diffs with :cq
  trustExitcode =true
[pull]
  ff = only  # fast forward merge only on pull

[include]
  path = ~/.gitconfig.local

# Local Git Config settings:
# -------------------------
# Put user specific settings in a  ~/.gitconfig.local file. e.g.:
#
# [user]
#   name = username
#   email = mailadress
